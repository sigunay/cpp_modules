{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "iaHqID9vWNagaizwkXtsE",
      "type": "text",
      "x": 209.92639318665442,
      "y": 156.80003509521487,
      "width": 667.7990112304688,
      "height": 135,
      "angle": 0,
      "strokeColor": "#2f9e44",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aE",
      "roundness": null,
      "seed": 2100889090,
      "version": 513,
      "versionNonce": 1696938117,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1736248574014,
      "link": null,
      "locked": false,
      "text": "1. Sınıf (Class) Nedir?\nSınıf, bir nesne (object) oluşturmak için kullanılan bir taslaktır. \nC++'da sınıflar, verileri ve bu verilere uygulanacak işlemleri bir arada tutar.\nBir sınıfı, hem değişkenleri (attributes) hem de fonksiyonları (methods)\niçeren bir \"şablon\" gibi düşünebilirsiniz.",
      "fontSize": 20,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "1. Sınıf (Class) Nedir?\nSınıf, bir nesne (object) oluşturmak için kullanılan bir taslaktır. \nC++'da sınıflar, verileri ve bu verilere uygulanacak işlemleri bir arada tutar.\nBir sınıfı, hem değişkenleri (attributes) hem de fonksiyonları (methods)\niçeren bir \"şablon\" gibi düşünebilirsiniz.",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "_bI4wrgsPqiiX_O5tCnBj",
      "type": "text",
      "x": 209.92639318665442,
      "y": 323.8000259399414,
      "width": 812.8389282226562,
      "height": 81,
      "angle": 0,
      "strokeColor": "#2f9e44",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aF",
      "roundness": null,
      "seed": 642952478,
      "version": 622,
      "versionNonce": 1431060043,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1736248574014,
      "link": null,
      "locked": false,
      "text": "2. Üye (member) Fonksiyonlar ve Üye Değişkenler\nÜye değişkenler: Sınıfın içinde tanımlanan ve sınıfın özelliklerini saklayan değişkenlerdir.\nÜye fonksiyonlar: Sınıfın içinde tanımlanan ve sınıfın işlevselliğini sağlayan fonksiyonlardır.",
      "fontSize": 20,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "2. Üye (member) Fonksiyonlar ve Üye Değişkenler\nÜye değişkenler: Sınıfın içinde tanımlanan ve sınıfın özelliklerini saklayan değişkenlerdir.\nÜye fonksiyonlar: Sınıfın içinde tanımlanan ve sınıfın işlevselliğini sağlayan fonksiyonlardır.",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "BJVUHaJvKZkbrgXjZegCc",
      "type": "text",
      "x": 209.92639318665442,
      "y": 439.0000686645508,
      "width": 901.1187744140625,
      "height": 81,
      "angle": 0,
      "strokeColor": "#2f9e44",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aG",
      "roundness": null,
      "seed": 1822718686,
      "version": 247,
      "versionNonce": 592830437,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1736248574014,
      "link": null,
      "locked": false,
      "text": "3. Erişim Belirleyiciler (Access Specifiers)\npublic: Bu erişim belirleyiciyle tanımlanan üye değişkenler ve fonksiyonlar sınıfın dışından erişilebilir.\nprivate: Bu erişim belirleyiciyle tanımlanan üyeler sadece sınıfın kendi içinde kullanılabilir.",
      "fontSize": 20,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "3. Erişim Belirleyiciler (Access Specifiers)\npublic: Bu erişim belirleyiciyle tanımlanan üye değişkenler ve fonksiyonlar sınıfın dışından erişilebilir.\nprivate: Bu erişim belirleyiciyle tanımlanan üyeler sadece sınıfın kendi içinde kullanılabilir.",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "-pwDy3div6gRx7NlZHA1y",
      "type": "text",
      "x": 209.92639318665442,
      "y": 539.7999954223633,
      "width": 923.3587646484375,
      "height": 135,
      "angle": 0,
      "strokeColor": "#2f9e44",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aH",
      "roundness": null,
      "seed": 1696631070,
      "version": 233,
      "versionNonce": 1298414827,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1736248574014,
      "link": null,
      "locked": false,
      "text": "Function Overloading ile İlgili Temel Notlar:\nİsim Aynı Olmalı: Aynı isimde birden fazla fonksiyon tanımlanır.\nParametre Türü ve Sayısı Farklı Olmalı: Fonksiyonlar, parametrelerin türü veya sayısına göre ayırt edilir.\nDönüş Türü Overloading İçin Yeterli Değildir: İki fonksiyon sadece dönüş türüyle ayırt edilemez.\nDerleyici, yalnızca parametrelere bakarak hangi fonksiyonun çağrılacağını anlar.",
      "fontSize": 20,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Function Overloading ile İlgili Temel Notlar:\nİsim Aynı Olmalı: Aynı isimde birden fazla fonksiyon tanımlanır.\nParametre Türü ve Sayısı Farklı Olmalı: Fonksiyonlar, parametrelerin türü veya sayısına göre ayırt edilir.\nDönüş Türü Overloading İçin Yeterli Değildir: İki fonksiyon sadece dönüş türüyle ayırt edilemez.\nDerleyici, yalnızca parametrelere bakarak hangi fonksiyonun çağrılacağını anlar.",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "hQ16P9AGuhGxuQRL5wvZG",
      "type": "text",
      "x": 1586.400146484375,
      "y": 134.19996643066406,
      "width": 273.8397216796875,
      "height": 81,
      "angle": 0,
      "strokeColor": "#2f9e44",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aI",
      "roundness": null,
      "seed": 1039994206,
      "version": 684,
      "versionNonce": 451543629,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1736064064890,
      "link": null,
      "locked": false,
      "text": "Yeni terimler\nshallow copy (yüzeysel kopya)\ndeep copy (derin kopya)",
      "fontSize": 20,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Yeni terimler\nshallow copy (yüzeysel kopya)\ndeep copy (derin kopya)",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "MxMY5ONypmlnqPu2wv79_",
      "type": "text",
      "x": 1586.3999938964844,
      "y": 227.79998779296875,
      "width": 374.3594970703125,
      "height": 135,
      "angle": 0,
      "strokeColor": "#2f9e44",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aJ",
      "roundness": null,
      "seed": 568072862,
      "version": 278,
      "versionNonce": 1650971907,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1736064064890,
      "link": null,
      "locked": false,
      "text": "this: Geçerli nesnenin adresini işaret eder.\n\n*this: Geçerli nesneyi ifade eder.\n\nthis->: Geçerli nesnenin üyelerine erişir.",
      "fontSize": 20,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "this: Geçerli nesnenin adresini işaret eder.\n\n*this: Geçerli nesneyi ifade eder.\n\nthis->: Geçerli nesnenin üyelerine erişir.",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "PyE7QQrR6CK4NIzjSVvgn",
      "type": "text",
      "x": 212.55050444602898,
      "y": 704.9999053955078,
      "width": 1201.71826171875,
      "height": 405,
      "angle": 0,
      "strokeColor": "#2f9e44",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aK",
      "roundness": null,
      "seed": 1576065642,
      "version": 193,
      "versionNonce": 244420880,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1736083516157,
      "link": null,
      "locked": false,
      "text": "Copy Constructor\n1. Tanım: Copy constructor, aynı sınıftan başka bir nesneyi kullanarak yeni bir nesne oluşturur.\n2. Parametre: Tek bir parametre alır ve bu parametre genellikle sınıfın kendi türünden bir const referanstır.\n3. Amaç: Derin kopyalama (deep copy) işlemleri gerçekleştirmek için kullanılır. Varsayılan kopyalama derin kopyalamayı desteklemez.\n4. Sözdizimi: ClassName(const ClassName &obj);\n5. Kullanım Durumu: Genellikle bir nesnenin oluşturulması sırasında başka bir nesnenin değerleriyle başlatılması gerektiğinde çağrılır.\n\nCopy Assignment Operator (operator overload)\n1. Tanım: Copy assignment operator, mevcut bir nesneye başka bir nesnenin değerlerini atamak için kullanılır.\n2. Parametre: Tek bir parametre alır ve bu parametre genellikle sınıfın kendi türünden bir const referanstır.\n3. Amaç: Nesneler arasında kopyalama işlemlerini yürütmek. Yine derin kopyalama işlemlerini gerçekleştirebilir.\n4. Sözdizimi: ClassName& operator=(const ClassName &obj);\n5. Kullanım Durumu: Bir nesnenin başka bir nesne ile aynı değerleri almasını sağlamak için kullanılır.\n6. Özellikle operatör overload, C++ dilinde çok önemli bir özelliktir ve bu sayede sınıflar, C++'ın standart operatörlerini \n    kendi özel anlamlarına uygun şekilde kullanabilirler.",
      "fontSize": 20,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Copy Constructor\n1. Tanım: Copy constructor, aynı sınıftan başka bir nesneyi kullanarak yeni bir nesne oluşturur.\n2. Parametre: Tek bir parametre alır ve bu parametre genellikle sınıfın kendi türünden bir const referanstır.\n3. Amaç: Derin kopyalama (deep copy) işlemleri gerçekleştirmek için kullanılır. Varsayılan kopyalama derin kopyalamayı desteklemez.\n4. Sözdizimi: ClassName(const ClassName &obj);\n5. Kullanım Durumu: Genellikle bir nesnenin oluşturulması sırasında başka bir nesnenin değerleriyle başlatılması gerektiğinde çağrılır.\n\nCopy Assignment Operator (operator overload)\n1. Tanım: Copy assignment operator, mevcut bir nesneye başka bir nesnenin değerlerini atamak için kullanılır.\n2. Parametre: Tek bir parametre alır ve bu parametre genellikle sınıfın kendi türünden bir const referanstır.\n3. Amaç: Nesneler arasında kopyalama işlemlerini yürütmek. Yine derin kopyalama işlemlerini gerçekleştirebilir.\n4. Sözdizimi: ClassName& operator=(const ClassName &obj);\n5. Kullanım Durumu: Bir nesnenin başka bir nesne ile aynı değerleri almasını sağlamak için kullanılır.\n6. Özellikle operatör overload, C++ dilinde çok önemli bir özelliktir ve bu sayede sınıflar, C++'ın standart operatörlerini \n    kendi özel anlamlarına uygun şekilde kullanabilirler.",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "hlMa9_l61Eik8g0gthppv",
      "type": "text",
      "x": 212.55059163910965,
      "y": 1138.3287543160577,
      "width": 1374.9180908203125,
      "height": 135,
      "angle": 0,
      "strokeColor": "#2f9e44",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aL",
      "roundness": null,
      "seed": 585107216,
      "version": 153,
      "versionNonce": 1982129936,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1736083525433,
      "link": null,
      "locked": false,
      "text": "1. Bit Kaydırma (Shift Operations)\nSol Kaydırma (<<): Bir sayıyı her sol kaydırdığınızda, sayıyı 2 ile çarpmış olursunuz. Örneğin, x << 1, x'in değerini 2 ile çarpar.\nÖrnek: 5 << 1 işlemi, 5 sayısının ikilik tabandaki temsilini (101) bir bit sola kaydırır ve 1010 (onluk sistemde 10) elde ederiz.\nSağ Kaydırma (>>): Bir sayıyı her sağ kaydırdığınızda, sayıyı 2'ye bölmüş olursunuz (veya işaretli sayılarda işaret bitine bağlı olarak yuvarlama yaparsınız).\nÖrnek: 10 >> 1, 10 sayısının ikilik tabandaki temsilini (1010) bir bit sağa kaydırır ve 101 (onluk sistemde 5) elde ederiz.",
      "fontSize": 20,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "1. Bit Kaydırma (Shift Operations)\nSol Kaydırma (<<): Bir sayıyı her sol kaydırdığınızda, sayıyı 2 ile çarpmış olursunuz. Örneğin, x << 1, x'in değerini 2 ile çarpar.\nÖrnek: 5 << 1 işlemi, 5 sayısının ikilik tabandaki temsilini (101) bir bit sola kaydırır ve 1010 (onluk sistemde 10) elde ederiz.\nSağ Kaydırma (>>): Bir sayıyı her sağ kaydırdığınızda, sayıyı 2'ye bölmüş olursunuz (veya işaretli sayılarda işaret bitine bağlı olarak yuvarlama yaparsınız).\nÖrnek: 10 >> 1, 10 sayısının ikilik tabandaki temsilini (1010) bir bit sağa kaydırır ve 101 (onluk sistemde 5) elde ederiz.",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "UOYG_aVLsKkJrzeSdvNCz",
      "type": "text",
      "x": 212.55050444602898,
      "y": 1296.0430531093064,
      "width": 1193.3782958984375,
      "height": 324,
      "angle": 0,
      "strokeColor": "#2f9e44",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aM",
      "roundness": null,
      "seed": 244781040,
      "version": 61,
      "versionNonce": 1416736240,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1736083532339,
      "link": null,
      "locked": false,
      "text": "2. Bitsel VE (AND) İşlemi\nBu işlem, iki bitin de 1 olması durumunda sonuç 1 olur, aksi halde 0 olur.\nÖrnek: 5 & 3 işlemi, 5'in ikilik karşılığı (101) ile 3'ün ikilik karşılığını (011) VE işlemine tabi tutar ve sonuç 001 (onluk sistemde 1) olur.\n3. Bitsel VEYA (OR) İşlemi\nBu işlem, iki bitten en az biri 1 ise sonuç 1 olur.\nÖrnek: 5 | 3, 5 (101) ve 3 (011) bitlerinin VEYA işlemini yapar ve sonuç 111 (onluk sistemde 7) olur.\n4. Bitsel XOR (Exclusive OR) İşlemi\nİki bit farklı ise sonuç 1, aynı ise 0 olur.\nÖrnek: 5 ^ 3, 5 (101) ve 3 (011) bitlerinin XOR işlemini yapar ve sonuç 110 (onluk sistemde 6) olur.\n5. Masking (Maskeleme)\nMasking, belirli bitleri sıfırlamak veya seçmek için kullanılır.\nÖrnek: x & 0x0F işlemi, x'in alt dört bitini alır ve geri kalanı sıfırlar.",
      "fontSize": 20,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "2. Bitsel VE (AND) İşlemi\nBu işlem, iki bitin de 1 olması durumunda sonuç 1 olur, aksi halde 0 olur.\nÖrnek: 5 & 3 işlemi, 5'in ikilik karşılığı (101) ile 3'ün ikilik karşılığını (011) VE işlemine tabi tutar ve sonuç 001 (onluk sistemde 1) olur.\n3. Bitsel VEYA (OR) İşlemi\nBu işlem, iki bitten en az biri 1 ise sonuç 1 olur.\nÖrnek: 5 | 3, 5 (101) ve 3 (011) bitlerinin VEYA işlemini yapar ve sonuç 111 (onluk sistemde 7) olur.\n4. Bitsel XOR (Exclusive OR) İşlemi\nİki bit farklı ise sonuç 1, aynı ise 0 olur.\nÖrnek: 5 ^ 3, 5 (101) ve 3 (011) bitlerinin XOR işlemini yapar ve sonuç 110 (onluk sistemde 6) olur.\n5. Masking (Maskeleme)\nMasking, belirli bitleri sıfırlamak veya seçmek için kullanılır.\nÖrnek: x & 0x0F işlemi, x'in alt dört bitini alır ve geri kalanı sıfırlar.",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "uQNyW6S1dVivyEdLyOU0-",
      "type": "text",
      "x": 209.92639318665442,
      "y": 1638.4672699142295,
      "width": 1058.638427734375,
      "height": 405,
      "angle": 0,
      "strokeColor": "#2f9e44",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aN",
      "roundness": null,
      "seed": 1004255627,
      "version": 329,
      "versionNonce": 340460133,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1736248447845,
      "link": null,
      "locked": false,
      "text": "Bitwise operatörlerinin kullanım sebebi\n    -Diyelim ki bir değeri 2'nin katlarıyla çarpmak istiyoruz. Normalde x * 2 gibi bir çarpma işlemi yaparız,\n        ancak bu işlem biraz daha yavaş olabilir. Bit kaydırma ile bu işlemi daha hızlı yapabiliriz.\n    -Benzer şekilde, bir sayıyı 2'ye bölmek için sağ kaydırma kullanabiliriz.\n    -Performans İyileştirmesi:\n    -Çarpma ve Bölme İşlemleri: Bit kaydırma işlemleri, çarpma ve bölme işlemlerine göre çok daha hızlıdır\n        çünkü işlem doğrudan işlemcinin bit düzeyinde yapılır. Örneğin, bir vektörün her elemanını 2 ile çarpmak\n        veya bölmek gerektiğinde, çarpma ve bölme yerine sol ve sağ kaydırma kullanmak daha hızlı sonuç verir.\n    -Belli Bitlere Erişim: Bayraklar (Flags) ve Bit Maskeleri: Sistem seviyesinde programlama yaparken, genellikle\n        belirli bitler üzerinde çalışmanız gerekebilir. Örneğin, bir dosya veya kullanıcı haklarını temsil eden bir bayrak\n        yapısında, belirli bir hakka erişimi kontrol etmek için maskeleme işlemi kullanılır. Projende belirli bayrakların\n        veya durumların kontrol edilmesi gerektiğinde bu teknikler faydalı olur.\n    -Sıkıştırma ve Veri Paketleme: Bellek Kullanımını Azaltma: Büyük veri setlerinde bellek kullanımını azaltmak için\n        veri sıkıştırma teknikleri kullanılabilir. Bit seviyesinde manipülasyonlar, birden fazla küçük veriyi tek bir daha\n        büyük değişkende saklamak için kullanılır.",
      "fontSize": 20,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Bitwise operatörlerinin kullanım sebebi\n    -Diyelim ki bir değeri 2'nin katlarıyla çarpmak istiyoruz. Normalde x * 2 gibi bir çarpma işlemi yaparız,\n        ancak bu işlem biraz daha yavaş olabilir. Bit kaydırma ile bu işlemi daha hızlı yapabiliriz.\n    -Benzer şekilde, bir sayıyı 2'ye bölmek için sağ kaydırma kullanabiliriz.\n    -Performans İyileştirmesi:\n    -Çarpma ve Bölme İşlemleri: Bit kaydırma işlemleri, çarpma ve bölme işlemlerine göre çok daha hızlıdır\n        çünkü işlem doğrudan işlemcinin bit düzeyinde yapılır. Örneğin, bir vektörün her elemanını 2 ile çarpmak\n        veya bölmek gerektiğinde, çarpma ve bölme yerine sol ve sağ kaydırma kullanmak daha hızlı sonuç verir.\n    -Belli Bitlere Erişim: Bayraklar (Flags) ve Bit Maskeleri: Sistem seviyesinde programlama yaparken, genellikle\n        belirli bitler üzerinde çalışmanız gerekebilir. Örneğin, bir dosya veya kullanıcı haklarını temsil eden bir bayrak\n        yapısında, belirli bir hakka erişimi kontrol etmek için maskeleme işlemi kullanılır. Projende belirli bayrakların\n        veya durumların kontrol edilmesi gerektiğinde bu teknikler faydalı olur.\n    -Sıkıştırma ve Veri Paketleme: Bellek Kullanımını Azaltma: Büyük veri setlerinde bellek kullanımını azaltmak için\n        veri sıkıştırma teknikleri kullanılabilir. Bit seviyesinde manipülasyonlar, birden fazla küçük veriyi tek bir daha\n        büyük değişkende saklamak için kullanılır.",
      "autoResize": true,
      "lineHeight": 1.35
    },
    {
      "id": "Bq4UeLIQATOXz17gc3LxG",
      "type": "text",
      "x": 209.92639318665442,
      "y": 2058.667343156417,
      "width": 1107.2188110351562,
      "height": 324,
      "angle": 0,
      "strokeColor": "#2f9e44",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aQ",
      "roundness": null,
      "seed": 333480069,
      "version": 221,
      "versionNonce": 513736901,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1736250445630,
      "link": null,
      "locked": false,
      "text": "Bitwise operatörlerinin Projede kullanım sebebi\n    Örneğin toINT fonksiyonu için: _fixedPointValue >> _fractionalBits ifadesi, \"_fixedPointValue\" değerini \"_fractionalBits\"\n        kadar sağa kaydırır.\n        Bu işlem, kesirli kısmı (ondalık kısmı) atarak sadece tam sayı kısmını elde eder.\n        Örneğin, \"_fractionalBits\" değeri 8 ise, bu 8 bitin kesirli kısmı temsil ettiğini gösterir. Sağ kaydırma bu kesirli \n        kısmı yok sayar ve tam sayı kısmını çıkarır.\n    toFloat için: (1 << _fractionalBits) ifadesi, 1 sayısını _fractionalBits kadar sola kaydırarak 2^_fractionalBits\n        değerini elde eder. Bu, kesirli kısmın ölçeğini ifade eder. Sabit noktalı bir sayıyı kayan noktalı (float) bir sayıya\n        dönüştürmek için, tüm sayıyı bu ölçekle (kesirli kısmı temsil eden bitlerin değeri ile) bölmemiz gerekir.\n        Sabit noktalı sayılar, tam sayı ve kesirli kısmı birlikte saklar. Kayan noktalı sayıya dönüştürmek için, sabit noktalı\n        sayıyı, kesirli kısmı doğru bir şekilde yansıtacak şekilde ölçeklendirmemiz gerekiyor. Bu da _fixedPointValue'yi,\n        2'nin _fractionalBits kadar kuvvetine bölerek yapılır.",
      "fontSize": 20,
      "fontFamily": 6,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Bitwise operatörlerinin Projede kullanım sebebi\n    Örneğin toINT fonksiyonu için: _fixedPointValue >> _fractionalBits ifadesi, \"_fixedPointValue\" değerini \"_fractionalBits\"\n        kadar sağa kaydırır.\n        Bu işlem, kesirli kısmı (ondalık kısmı) atarak sadece tam sayı kısmını elde eder.\n        Örneğin, \"_fractionalBits\" değeri 8 ise, bu 8 bitin kesirli kısmı temsil ettiğini gösterir. Sağ kaydırma bu kesirli \n        kısmı yok sayar ve tam sayı kısmını çıkarır.\n    toFloat için: (1 << _fractionalBits) ifadesi, 1 sayısını _fractionalBits kadar sola kaydırarak 2^_fractionalBits\n        değerini elde eder. Bu, kesirli kısmın ölçeğini ifade eder. Sabit noktalı bir sayıyı kayan noktalı (float) bir sayıya\n        dönüştürmek için, tüm sayıyı bu ölçekle (kesirli kısmı temsil eden bitlerin değeri ile) bölmemiz gerekir.\n        Sabit noktalı sayılar, tam sayı ve kesirli kısmı birlikte saklar. Kayan noktalı sayıya dönüştürmek için, sabit noktalı\n        sayıyı, kesirli kısmı doğru bir şekilde yansıtacak şekilde ölçeklendirmemiz gerekiyor. Bu da _fixedPointValue'yi,\n        2'nin _fractionalBits kadar kuvvetine bölerek yapılır.",
      "autoResize": true,
      "lineHeight": 1.35
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}