{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "VHwEDTwc5Deqn9dYsbx7X",
      "type": "text",
      "x": 236.80007934570312,
      "y": -163.3999481201172,
      "width": 750.9993896484375,
      "height": 250,
      "angle": 0,
      "strokeColor": "#f08c00",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "am",
      "roundness": null,
      "seed": 1517318262,
      "version": 298,
      "versionNonce": 1495001578,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1737037137211,
      "link": null,
      "locked": false,
      "text": "MODULE 03 NOTES\n\n***    EX00    ***\n\nTemplates: Template'ler, bir sınıfın veya fonksiyonun farklı veri türleri için\nçalışmasını sağlayan bir C++ özelliğidir. Template kullanarak, kodda tekrar\neden veri türü bağımlı kısımları tek bir şablon olarak tanımlayabilir ve bu şablon\nüzerinden farklı türlerde veri ile çalışabilen daha genel kodlar yazabiliriz.\n\n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "MODULE 03 NOTES\n\n***    EX00    ***\n\nTemplates: Template'ler, bir sınıfın veya fonksiyonun farklı veri türleri için\nçalışmasını sağlayan bir C++ özelliğidir. Template kullanarak, kodda tekrar\neden veri türü bağımlı kısımları tek bir şablon olarak tanımlayabilir ve bu şablon\nüzerinden farklı türlerde veri ile çalışabilen daha genel kodlar yazabiliriz.\n\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "ofa1jdP5wXUS_jYRzWjja",
      "type": "text",
      "x": 234.69979858398438,
      "y": 55.40007019042969,
      "width": 820.2593994140625,
      "height": 2550,
      "angle": 0,
      "strokeColor": "#f08c00",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "ao",
      "roundness": null,
      "seed": 979243239,
      "version": 92,
      "versionNonce": 369603143,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1737300865714,
      "link": null,
      "locked": false,
      "text": "\n**C++'de Kalıtım**\n\nKalıtım, bir türetilmiş sınıfın bir temel sınıftan özellikleri ve yöntemleri miras almasını\nsağlayan, Nesne Yönelimli Programlama'da (OOP) temel bir kavramdır. Bu, kodun tekrar\nkullanımını ve hiyerarşiyi teşvik eder.\n\n### **Temel Kavramlar**\n\n1. **Temel Sınıf:**\n   - Özellikleri ve yöntemleri miras alınan ebeveyn sınıf.\n   ```cpp\n   class Base {\n   protected:\n       int baseAttribute;\n   public:\n       void baseMethod() {\n           std::cout << \"Temel yöntem\" << std::endl;\n       }\n   };\n   ```\n\n2. **Türetilmiş Sınıf:**\n   - Temel sınıftan miras alan çocuk sınıf.\n   ```cpp\n   class Derived : public Base {\n   public:\n       void derivedMethod() {\n           std::cout << \"Türetilmiş yöntem\" << std::endl;\n       }\n   };\n   ```\n\n3. **Erişim Belirleyiciler:**\n   - Türetilmiş sınıflardaki üye erişimini kontrol eder.\n   ```cpp\n   class Base {\n   protected:\n       int baseAttribute;\n   public:\n       void baseMethod() {\n           std::cout << \"Temel yöntem\" << std::endl;\n       }\n   };\n\n   class Derived : public Base {\n   public:\n       void useBaseMethod() {\n           baseMethod();\n       }\n   };\n   ```\n\n4. **Kurucular ve Yıkıcılar:**\n   - Temel sınıfın kurucuları, türetilmiş sınıfın kurucularından önce çağrılır.\n   ```cpp\n   class Base {\n   public:\n       Base() {\n           std::cout << \"Temel kurucu\" << std::endl;\n       }\n       ~Base() {\n           std::cout << \"Temel yıkıcı\" << std::endl;\n       }\n   };\n\n   class Derived : public Base {\n   public:\n       Derived() {\n           std::cout << \"Türetilmiş kurucu\" << std::endl;\n       }\n       ~Derived() {\n           std::cout << \"Türetilmiş yıkıcı\" << std::endl;\n       }\n   };\n   ```\n\n5. **Polimorfizm:**\n   - Türetilmiş sınıflar temel sınıf yöntemlerini geçersiz kılabilir.\n   ```cpp\n   class Base {\n   public:\n       virtual void display() {\n           std::cout << \"Temel görüntüleme\" << std::endl;\n       }\n   };\n\n   class Derived : public Base {\n   public:\n       void display() override {\n           std::cout << \"Türetilmiş görüntüleme\" << std::endl;\n       }\n   };\n   ```\n\n### **Özet**\n- Kalıtım, tekrar kullanımı ve organizasyonu teşvik eder.\n- Erişim belirleyiciler üye görünürlüğünü kontrol eder.\n- Doğru kurucu/yıkıcı zincirlemesi esastır.\n- Polimorfizm tasarımda esnekliği artırır.\n\n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "\n**C++'de Kalıtım**\n\nKalıtım, bir türetilmiş sınıfın bir temel sınıftan özellikleri ve yöntemleri miras almasını\nsağlayan, Nesne Yönelimli Programlama'da (OOP) temel bir kavramdır. Bu, kodun tekrar\nkullanımını ve hiyerarşiyi teşvik eder.\n\n### **Temel Kavramlar**\n\n1. **Temel Sınıf:**\n   - Özellikleri ve yöntemleri miras alınan ebeveyn sınıf.\n   ```cpp\n   class Base {\n   protected:\n       int baseAttribute;\n   public:\n       void baseMethod() {\n           std::cout << \"Temel yöntem\" << std::endl;\n       }\n   };\n   ```\n\n2. **Türetilmiş Sınıf:**\n   - Temel sınıftan miras alan çocuk sınıf.\n   ```cpp\n   class Derived : public Base {\n   public:\n       void derivedMethod() {\n           std::cout << \"Türetilmiş yöntem\" << std::endl;\n       }\n   };\n   ```\n\n3. **Erişim Belirleyiciler:**\n   - Türetilmiş sınıflardaki üye erişimini kontrol eder.\n   ```cpp\n   class Base {\n   protected:\n       int baseAttribute;\n   public:\n       void baseMethod() {\n           std::cout << \"Temel yöntem\" << std::endl;\n       }\n   };\n\n   class Derived : public Base {\n   public:\n       void useBaseMethod() {\n           baseMethod();\n       }\n   };\n   ```\n\n4. **Kurucular ve Yıkıcılar:**\n   - Temel sınıfın kurucuları, türetilmiş sınıfın kurucularından önce çağrılır.\n   ```cpp\n   class Base {\n   public:\n       Base() {\n           std::cout << \"Temel kurucu\" << std::endl;\n       }\n       ~Base() {\n           std::cout << \"Temel yıkıcı\" << std::endl;\n       }\n   };\n\n   class Derived : public Base {\n   public:\n       Derived() {\n           std::cout << \"Türetilmiş kurucu\" << std::endl;\n       }\n       ~Derived() {\n           std::cout << \"Türetilmiş yıkıcı\" << std::endl;\n       }\n   };\n   ```\n\n5. **Polimorfizm:**\n   - Türetilmiş sınıflar temel sınıf yöntemlerini geçersiz kılabilir.\n   ```cpp\n   class Base {\n   public:\n       virtual void display() {\n           std::cout << \"Temel görüntüleme\" << std::endl;\n       }\n   };\n\n   class Derived : public Base {\n   public:\n       void display() override {\n           std::cout << \"Türetilmiş görüntüleme\" << std::endl;\n       }\n   };\n   ```\n\n### **Özet**\n- Kalıtım, tekrar kullanımı ve organizasyonu teşvik eder.\n- Erişim belirleyiciler üye görünürlüğünü kontrol eder.\n- Doğru kurucu/yıkıcı zincirlemesi esastır.\n- Polimorfizm tasarımda esnekliği artırır.\n\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "NxfRuKxOiqInvWsX57pId",
      "type": "text",
      "x": 1459.4997253417969,
      "y": -58.199851989746094,
      "width": 1137.13916015625,
      "height": 2850,
      "angle": 0,
      "strokeColor": "#f08c00",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "aq",
      "roundness": null,
      "seed": 68534441,
      "version": 90,
      "versionNonce": 1773567785,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1737301056179,
      "link": null,
      "locked": false,
      "text": "**C++'de Kalıtım**\n\nKalıtım, bir türetilmiş sınıfın bir temel sınıftan özellikleri ve yöntemleri miras almasını\nsağlayan, Nesne Yönelimli Programlama'da (OOP) temel bir kavramdır. Bu, kodun tekrar\nkullanımını ve hiyerarşiyi teşvik eder.\n\n### **Temel Kavramlar**\n\n1. **Temel Sınıf:**\n   - Özellikleri ve yöntemleri miras alınan ebeveyn sınıf. Temel sınıf, genellikle diğer sınıflar\ntarafından genişletilen genel işlevselliği içerir.\n   ```cpp\n   class Base {\n   protected:\n       int baseAttribute;\n   public:\n       void baseMethod() {\n           std::cout << \"Temel yöntem\" << std::endl;\n       }\n   };\n   ```\n\n2. **Türetilmiş Sınıf:**\n   - Temel sınıftan miras alan çocuk sınıf. Türetilmiş sınıf, temel sınıfın işlevselliğini genişletebilir\nveya özelleştirebilir.\n   ```cpp\n   class Derived : public Base {\n   public:\n       void derivedMethod() {\n           std::cout << \"Türetilmiş yöntem\" << std::endl;\n       }\n   };\n   ```\n\n3. **Erişim Belirleyiciler:**\n   - Türetilmiş sınıflardaki üye erişimini kontrol eder. Kamu (public), korunan (protected) ve\n        özel (private) olmak üzere üç tür erişim belirleyici vardır.\n   - **Public Inheritance:** Temel sınıfın public ve protected üyeleri, türetilmiş sınıfta sırasıyla\n        public ve protected olarak kalır.\n   - **Protected Inheritance:** Temel sınıfın public ve protected üyeleri türetilmiş sınıfta protected\n        olur.\n   - **Private Inheritance:** Temel sınıfın public ve protected üyeleri türetilmiş sınıfta private olur.\n   ```cpp\n   class Base {\n   protected:\n       int baseAttribute;\n   public:\n       void baseMethod() {\n           std::cout << \"Temel yöntem\" << std::endl;\n       }\n   };\n\n   class Derived : public Base {\n   public:\n       void useBaseMethod() {\n           baseMethod();\n       }\n   };\n   ```\n\n4. **Kurucular ve Yıkıcılar:**\n   - Temel sınıfın kurucuları, türetilmiş sınıfın kurucularından önce çağrılır ve bu, türetilmiş sınıfın\n        kurucusunda temel sınıfın üyelerine erişim sağlamak için önemlidir. Aynı şekilde, yıkıcılar ters sırada çağrılır.\n   ```cpp\n   class Base {\n   public:\n       Base() {\n           std::cout << \"Temel kurucu\" << std::endl;\n       }\n       ~Base() {\n           std::cout << \"Temel yıkıcı\" << std::endl;\n       }\n   };\n\n   class Derived : public Base {\n   public:\n       Derived() {\n           std::cout << \"Türetilmiş kurucu\" << std::endl;\n       }\n       ~Derived() {\n           std::cout << \"Türetilmiş yıkıcı\" << std::endl;\n       }\n   };\n   ```\n\n5. **Polimorfizm:**\n   - Türetilmiş sınıflar, temel sınıfın yöntemlerini geçersiz kılabilir ve bu, çok biçimlilik (polymorphism)\n        olarak adlandırılır. Sanal (virtual) işlevler, temel sınıf referansları veya işaretçileri kullanılarak\n        türetilmiş sınıf yöntemlerinin çağrılmasına izin verir.\n   - **Sanal Fonksiyonlar:** Temel sınıfın bir yöntemini sanal olarak bildirerek, türetilmiş sınıfların bu\n        yöntemi geçersiz kılmasına olanak tanır.\n   ```cpp\n   class Base {\n   public:\n       virtual void display() {\n           std::cout << \"Temel görüntüleme\" << std::endl;\n       }\n   };\n\n   class Derived : public Base {\n   public:\n       void display() override {\n           std::cout << \"Türetilmiş görüntüleme\" << std::endl;\n       }\n   };\n   ```\n\n### **Özet**\n- Kalıtım, tekrar kullanımı ve organizasyonu teşvik eder.\n- Erişim belirleyiciler üye görünürlüğünü kontrol eder.\n- Doğru kurucu/yıkıcı zincirlemesi esastır.\n- Polimorfizm tasarımda esnekliği artırır ve kodun genişletilmesini kolaylaştırır.\n\n",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "**C++'de Kalıtım**\n\nKalıtım, bir türetilmiş sınıfın bir temel sınıftan özellikleri ve yöntemleri miras almasını\nsağlayan, Nesne Yönelimli Programlama'da (OOP) temel bir kavramdır. Bu, kodun tekrar\nkullanımını ve hiyerarşiyi teşvik eder.\n\n### **Temel Kavramlar**\n\n1. **Temel Sınıf:**\n   - Özellikleri ve yöntemleri miras alınan ebeveyn sınıf. Temel sınıf, genellikle diğer sınıflar\ntarafından genişletilen genel işlevselliği içerir.\n   ```cpp\n   class Base {\n   protected:\n       int baseAttribute;\n   public:\n       void baseMethod() {\n           std::cout << \"Temel yöntem\" << std::endl;\n       }\n   };\n   ```\n\n2. **Türetilmiş Sınıf:**\n   - Temel sınıftan miras alan çocuk sınıf. Türetilmiş sınıf, temel sınıfın işlevselliğini genişletebilir\nveya özelleştirebilir.\n   ```cpp\n   class Derived : public Base {\n   public:\n       void derivedMethod() {\n           std::cout << \"Türetilmiş yöntem\" << std::endl;\n       }\n   };\n   ```\n\n3. **Erişim Belirleyiciler:**\n   - Türetilmiş sınıflardaki üye erişimini kontrol eder. Kamu (public), korunan (protected) ve\n        özel (private) olmak üzere üç tür erişim belirleyici vardır.\n   - **Public Inheritance:** Temel sınıfın public ve protected üyeleri, türetilmiş sınıfta sırasıyla\n        public ve protected olarak kalır.\n   - **Protected Inheritance:** Temel sınıfın public ve protected üyeleri türetilmiş sınıfta protected\n        olur.\n   - **Private Inheritance:** Temel sınıfın public ve protected üyeleri türetilmiş sınıfta private olur.\n   ```cpp\n   class Base {\n   protected:\n       int baseAttribute;\n   public:\n       void baseMethod() {\n           std::cout << \"Temel yöntem\" << std::endl;\n       }\n   };\n\n   class Derived : public Base {\n   public:\n       void useBaseMethod() {\n           baseMethod();\n       }\n   };\n   ```\n\n4. **Kurucular ve Yıkıcılar:**\n   - Temel sınıfın kurucuları, türetilmiş sınıfın kurucularından önce çağrılır ve bu, türetilmiş sınıfın\n        kurucusunda temel sınıfın üyelerine erişim sağlamak için önemlidir. Aynı şekilde, yıkıcılar ters sırada çağrılır.\n   ```cpp\n   class Base {\n   public:\n       Base() {\n           std::cout << \"Temel kurucu\" << std::endl;\n       }\n       ~Base() {\n           std::cout << \"Temel yıkıcı\" << std::endl;\n       }\n   };\n\n   class Derived : public Base {\n   public:\n       Derived() {\n           std::cout << \"Türetilmiş kurucu\" << std::endl;\n       }\n       ~Derived() {\n           std::cout << \"Türetilmiş yıkıcı\" << std::endl;\n       }\n   };\n   ```\n\n5. **Polimorfizm:**\n   - Türetilmiş sınıflar, temel sınıfın yöntemlerini geçersiz kılabilir ve bu, çok biçimlilik (polymorphism)\n        olarak adlandırılır. Sanal (virtual) işlevler, temel sınıf referansları veya işaretçileri kullanılarak\n        türetilmiş sınıf yöntemlerinin çağrılmasına izin verir.\n   - **Sanal Fonksiyonlar:** Temel sınıfın bir yöntemini sanal olarak bildirerek, türetilmiş sınıfların bu\n        yöntemi geçersiz kılmasına olanak tanır.\n   ```cpp\n   class Base {\n   public:\n       virtual void display() {\n           std::cout << \"Temel görüntüleme\" << std::endl;\n       }\n   };\n\n   class Derived : public Base {\n   public:\n       void display() override {\n           std::cout << \"Türetilmiş görüntüleme\" << std::endl;\n       }\n   };\n   ```\n\n### **Özet**\n- Kalıtım, tekrar kullanımı ve organizasyonu teşvik eder.\n- Erişim belirleyiciler üye görünürlüğünü kontrol eder.\n- Doğru kurucu/yıkıcı zincirlemesi esastır.\n- Polimorfizm tasarımda esnekliği artırır ve kodun genişletilmesini kolaylaştırır.\n\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "p9xJqNlPt0A2TnrwcAYim",
      "type": "text",
      "x": 230.29984283447266,
      "y": 2645.69997215271,
      "width": 976.759033203125,
      "height": 225,
      "angle": 0,
      "strokeColor": "#f08c00",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "as",
      "roundness": null,
      "seed": 352766631,
      "version": 101,
      "versionNonce": 78500551,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1737301347875,
      "link": null,
      "locked": false,
      "text": "Bir `ScavTrap` nesnesi oluşturulduğunda, program önce bir `ClapTrap` nesnesini oluşturur.\nBu, `ScavTrap` sınıfının `ClapTrap` sınıfından türediği için, `ClapTrap`'in kurucusunun\n`ScavTrap`'in kurucusundan önce çağrıldığı anlamına gelir. Yıkıcılar ise ters sırada çağrılır;\nyani, önce `ScavTrap` yıkılır, ardından `ClapTrap`.\n\nBu zincirleme, kalıtım hiyerarşisinin düzgün çalışmasını sağlar. Temel sınıfın kurucusu önce çağrılarak,\ntemel sınıfın kaynakları veya bağımlılıkları türetilmiş sınıfın kurucusundan önce hazırlanır. Aynı şekilde,\nyıkıcılar ters sırada çağrılarak, türetilmiş sınıf yıkılmadan önce temel sınıfın kaynakları serbest bırakılır.\nBu, bellek sızıntıları ve kaynakların yanlış yönetimi gibi sorunların önüne geçer.",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Bir `ScavTrap` nesnesi oluşturulduğunda, program önce bir `ClapTrap` nesnesini oluşturur.\nBu, `ScavTrap` sınıfının `ClapTrap` sınıfından türediği için, `ClapTrap`'in kurucusunun\n`ScavTrap`'in kurucusundan önce çağrıldığı anlamına gelir. Yıkıcılar ise ters sırada çağrılır;\nyani, önce `ScavTrap` yıkılır, ardından `ClapTrap`.\n\nBu zincirleme, kalıtım hiyerarşisinin düzgün çalışmasını sağlar. Temel sınıfın kurucusu önce çağrılarak,\ntemel sınıfın kaynakları veya bağımlılıkları türetilmiş sınıfın kurucusundan önce hazırlanır. Aynı şekilde,\nyıkıcılar ters sırada çağrılarak, türetilmiş sınıf yıkılmadan önce temel sınıfın kaynakları serbest bırakılır.\nBu, bellek sızıntıları ve kaynakların yanlış yönetimi gibi sorunların önüne geçer.",
      "autoResize": true,
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}