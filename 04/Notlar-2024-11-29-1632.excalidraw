{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "94x9gYXIoZubm6FDmr4_w",
      "type": "text",
      "x": 364.8000183105469,
      "y": 139.80003356933594,
      "width": 696.2593994140625,
      "height": 75,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a2",
      "roundness": null,
      "seed": 461160450,
      "version": 8,
      "versionNonce": 1654636668,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1738074449986,
      "link": null,
      "locked": false,
      "text": "Destructorların tersine zincirleme (reverse chaining) özelliği sayesinde,\ntüretilmiş sınıfta temel sınıfın destructor'ını elle çağırmaya gerek yoktur.\nBu otomatik olarak yapılır.",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Destructorların tersine zincirleme (reverse chaining) özelliği sayesinde,\ntüretilmiş sınıfta temel sınıfın destructor'ını elle çağırmaya gerek yoktur.\nBu otomatik olarak yapılır.",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "PHUT8RROUZn1Vvd_GwCuy",
      "type": "text",
      "x": 368.8000183105469,
      "y": 302.20001220703125,
      "width": 847.9393310546875,
      "height": 3775,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a3",
      "roundness": null,
      "seed": 1903639522,
      "version": 23,
      "versionNonce": 1754764612,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1738074449986,
      "link": null,
      "locked": false,
      "text": "1. Türetilmiş Sınıf ve Bellek Düzeni\nKalıtımın Bellekteki Gerçekliği\nTüretilmiş bir sınıf (Derived), temel sınıfın (Base) tüm özelliklerini miras alır.\nBu, türetilmiş sınıfın bir nesnesi oluşturulduğunda, bellekte hem temel sınıfın hem de\ntüretilmiş sınıfın üyelerine yer açıldığı anlamına gelir. Yani türetilmiş sınıfın bir nesnesi,\ndaha geniş bir nesnedir, çünkü:\nTemel sınıfın üyelerini içerir.\nTüretilmiş sınıfın kendi ek üyelerini içerir.\n\nSomut Örnek: Bellek Düzeni\ncpp\n#include <iostream>\n#include <string>\n\nclass Base {\nprivate:\n    int _baseValue;\n\npublic:\n    Base() : _baseValue(42) {\n        std::cout << \"Base constructor called\" << std::endl;\n    }\n    void showBaseValue() const {\n        std::cout << \"Base value: \" << _baseValue << std::endl;\n    }\n};\n\nclass Derived : public Base {\nprivate:\n    int _derivedValue;\n\npublic:\n    Derived() : _derivedValue(99) {\n        std::cout << \"Derived constructor called\" << std::endl;\n    }\n    void showDerivedValue() const {\n        std::cout << \"Derived value: \" << _derivedValue << std::endl;\n    }\n};\n\nint main() {\n    Derived obj;\n    obj.showBaseValue();    // Temel sınıf üyesi\n    obj.showDerivedValue(); // Türetilmiş sınıf üyesi\n    return 0;\n}\nÇıktı:\nplaintext\nKopyala\nDüzenle\nBase constructor called\nDerived constructor called\nBase value: 42\nDerived value: 99\nBellekteki Düzen:\n\nDerived sınıfı, Base sınıfının tüm üyelerini ve kendi üyelerini içerir.\nBellekteki yapısı aşağıdaki gibi olur:\ncss\n[ _baseValue ]  <-- Base sınıfı\n[ _derivedValue ]  <-- Derived sınıfı\nYani, bir Derived nesnesi bellekte Base'in özelliklerini de içeren bir yapı olarak saklanır.\n\n2. Virtual Fonksiyonların Gerçekliği\nVirtual Fonksiyonlar ve Sanal Tablo (V-Table)\nVirtual fonksiyonlar, türetilmiş sınıflarda override edilebilir ve temel sınıf işaretçileri\nveya referansları üzerinden çağrılabilir.\nBu, C++'ta sanal tablo (V-Table) adlı bir yapı aracılığıyla gerçekleştirilir.\nV-Table Nasıl Çalışır?\nSanal Tablo (V-Table):\n\nBir sınıfın virtual işlevlerinin adreslerini içeren bir tablodur.\nTüretilmiş bir sınıf, kendi virtual işlevlerini override ettiğinde, bu tablo güncellenir.\nSanal Tablo İşaretçisi (V-Ptr):\n\nHer polimorfik sınıfın nesnesi, sanal tablo işaretçisi (V-Ptr) içerir.\nBu işaretçi, o nesnenin hangi sınıfa ait olduğuna göre doğru sanal tabloya yönlendirilir.\nSomut Örnek: Virtual Fonksiyonlar\ncpp\n#include <iostream>\n#include <string>\n\nclass Base {\npublic:\n    virtual void speak() const {\n        std::cout << \"Base speaking!\" << std::endl;\n    }\n    virtual ~Base() {}\n};\n\nclass Derived : public Base {\npublic:\n    void speak() const override {\n        std::cout << \"Derived speaking!\" << std::endl;\n    }\n};\n\nint main() {\n    Base* basePtr = new Derived();\n    basePtr->speak(); // Virtual function çağrılır, Derived'in speak()'i çalışır\n    delete basePtr;\n    return 0;\n}\nÇıktı:\nDerived speaking!\nBellekteki İşlem:\n\nBase* İşaretçisi:\n\nbasePtr, Derived nesnesini işaret eder.\nspeak() çağrıldığında, sanal tabloya (V-Table) gidilir.\nSanal tablo, hangi sınıfın speak() fonksiyonunu çağıracağını belirler.\nBellek Düzeni:\n\nBase sınıfının nesnesi bir V-Ptr içerir.\nDerived sınıfı, kendi sanal tablosuna işaret eden bir V-Ptr ile kendi üyelerini içerir.\ncss\nKopyala\nDüzenle\n[ V-Ptr ] --> [ V-Table ] --> [ Derived::speak() ]\n3. Virtual Fonksiyonlarla Normal Fonksiyonların Farkı\nNormal Fonksiyon:\n\nÇağrılan fonksiyon, derleme zamanında sabitlenir (early binding).\nDerleyici, hangi fonksiyonun çağrılacağını statik olarak bilir.\nVirtual Fonksiyon:\n\nÇağrılan fonksiyon, çalışma zamanında belirlenir (late binding).\nSanal tablo sayesinde, doğru fonksiyon çalışma sırasında seçilir.\n4. Türetilmiş Sınıflar ve Virtual Fonksiyonların Bellek Maliyeti\nEkstra Bellek:\n\nSanal işlevler için her nesne bir V-Ptr işaretçisi içerir.\nSanal işlevlerin adreslerini tutan bir V-Table bellekte saklanır.\nPerformans:\n\nVirtual fonksiyon çağrıları, normal fonksiyon çağrılarına göre biraz daha maliyetlidir,\nçünkü dolaylı bir adres çözümü (indirection) yapılır.\nÖzet: Kalıtım ve Virtual Fonksiyonlar Nasıl İşliyor?\nTüretilmiş Sınıf:\n\nTüretilmiş bir nesne, hem temel sınıfın hem de kendi üyelerini bellekte birleştirerek taşır.\nBellekte temel sınıf üyeleri, türetilmiş sınıf üyelerinin altında yer alır.\nVirtual Fonksiyonlar:\n\nSanal fonksiyonlar, bir sanal tablo (V-Table) mekanizması üzerinden çalışır.\nHer nesne bir V-Ptr işaretçisi taşır ve bu işaretçi, doğru fonksiyonun çağrılmasını sağlar.\nSanal Fonksiyonların Avantajı:\n\nPolimorfizmi mümkün kılar.\nHangi fonksiyonun çağrılacağı çalışma zamanında belirlenir (late binding).",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "1. Türetilmiş Sınıf ve Bellek Düzeni\nKalıtımın Bellekteki Gerçekliği\nTüretilmiş bir sınıf (Derived), temel sınıfın (Base) tüm özelliklerini miras alır.\nBu, türetilmiş sınıfın bir nesnesi oluşturulduğunda, bellekte hem temel sınıfın hem de\ntüretilmiş sınıfın üyelerine yer açıldığı anlamına gelir. Yani türetilmiş sınıfın bir nesnesi,\ndaha geniş bir nesnedir, çünkü:\nTemel sınıfın üyelerini içerir.\nTüretilmiş sınıfın kendi ek üyelerini içerir.\n\nSomut Örnek: Bellek Düzeni\ncpp\n#include <iostream>\n#include <string>\n\nclass Base {\nprivate:\n    int _baseValue;\n\npublic:\n    Base() : _baseValue(42) {\n        std::cout << \"Base constructor called\" << std::endl;\n    }\n    void showBaseValue() const {\n        std::cout << \"Base value: \" << _baseValue << std::endl;\n    }\n};\n\nclass Derived : public Base {\nprivate:\n    int _derivedValue;\n\npublic:\n    Derived() : _derivedValue(99) {\n        std::cout << \"Derived constructor called\" << std::endl;\n    }\n    void showDerivedValue() const {\n        std::cout << \"Derived value: \" << _derivedValue << std::endl;\n    }\n};\n\nint main() {\n    Derived obj;\n    obj.showBaseValue();    // Temel sınıf üyesi\n    obj.showDerivedValue(); // Türetilmiş sınıf üyesi\n    return 0;\n}\nÇıktı:\nplaintext\nKopyala\nDüzenle\nBase constructor called\nDerived constructor called\nBase value: 42\nDerived value: 99\nBellekteki Düzen:\n\nDerived sınıfı, Base sınıfının tüm üyelerini ve kendi üyelerini içerir.\nBellekteki yapısı aşağıdaki gibi olur:\ncss\n[ _baseValue ]  <-- Base sınıfı\n[ _derivedValue ]  <-- Derived sınıfı\nYani, bir Derived nesnesi bellekte Base'in özelliklerini de içeren bir yapı olarak saklanır.\n\n2. Virtual Fonksiyonların Gerçekliği\nVirtual Fonksiyonlar ve Sanal Tablo (V-Table)\nVirtual fonksiyonlar, türetilmiş sınıflarda override edilebilir ve temel sınıf işaretçileri\nveya referansları üzerinden çağrılabilir.\nBu, C++'ta sanal tablo (V-Table) adlı bir yapı aracılığıyla gerçekleştirilir.\nV-Table Nasıl Çalışır?\nSanal Tablo (V-Table):\n\nBir sınıfın virtual işlevlerinin adreslerini içeren bir tablodur.\nTüretilmiş bir sınıf, kendi virtual işlevlerini override ettiğinde, bu tablo güncellenir.\nSanal Tablo İşaretçisi (V-Ptr):\n\nHer polimorfik sınıfın nesnesi, sanal tablo işaretçisi (V-Ptr) içerir.\nBu işaretçi, o nesnenin hangi sınıfa ait olduğuna göre doğru sanal tabloya yönlendirilir.\nSomut Örnek: Virtual Fonksiyonlar\ncpp\n#include <iostream>\n#include <string>\n\nclass Base {\npublic:\n    virtual void speak() const {\n        std::cout << \"Base speaking!\" << std::endl;\n    }\n    virtual ~Base() {}\n};\n\nclass Derived : public Base {\npublic:\n    void speak() const override {\n        std::cout << \"Derived speaking!\" << std::endl;\n    }\n};\n\nint main() {\n    Base* basePtr = new Derived();\n    basePtr->speak(); // Virtual function çağrılır, Derived'in speak()'i çalışır\n    delete basePtr;\n    return 0;\n}\nÇıktı:\nDerived speaking!\nBellekteki İşlem:\n\nBase* İşaretçisi:\n\nbasePtr, Derived nesnesini işaret eder.\nspeak() çağrıldığında, sanal tabloya (V-Table) gidilir.\nSanal tablo, hangi sınıfın speak() fonksiyonunu çağıracağını belirler.\nBellek Düzeni:\n\nBase sınıfının nesnesi bir V-Ptr içerir.\nDerived sınıfı, kendi sanal tablosuna işaret eden bir V-Ptr ile kendi üyelerini içerir.\ncss\nKopyala\nDüzenle\n[ V-Ptr ] --> [ V-Table ] --> [ Derived::speak() ]\n3. Virtual Fonksiyonlarla Normal Fonksiyonların Farkı\nNormal Fonksiyon:\n\nÇağrılan fonksiyon, derleme zamanında sabitlenir (early binding).\nDerleyici, hangi fonksiyonun çağrılacağını statik olarak bilir.\nVirtual Fonksiyon:\n\nÇağrılan fonksiyon, çalışma zamanında belirlenir (late binding).\nSanal tablo sayesinde, doğru fonksiyon çalışma sırasında seçilir.\n4. Türetilmiş Sınıflar ve Virtual Fonksiyonların Bellek Maliyeti\nEkstra Bellek:\n\nSanal işlevler için her nesne bir V-Ptr işaretçisi içerir.\nSanal işlevlerin adreslerini tutan bir V-Table bellekte saklanır.\nPerformans:\n\nVirtual fonksiyon çağrıları, normal fonksiyon çağrılarına göre biraz daha maliyetlidir,\nçünkü dolaylı bir adres çözümü (indirection) yapılır.\nÖzet: Kalıtım ve Virtual Fonksiyonlar Nasıl İşliyor?\nTüretilmiş Sınıf:\n\nTüretilmiş bir nesne, hem temel sınıfın hem de kendi üyelerini bellekte birleştirerek taşır.\nBellekte temel sınıf üyeleri, türetilmiş sınıf üyelerinin altında yer alır.\nVirtual Fonksiyonlar:\n\nSanal fonksiyonlar, bir sanal tablo (V-Table) mekanizması üzerinden çalışır.\nHer nesne bir V-Ptr işaretçisi taşır ve bu işaretçi, doğru fonksiyonun çağrılmasını sağlar.\nSanal Fonksiyonların Avantajı:\n\nPolimorfizmi mümkün kılar.\nHangi fonksiyonun çağrılacağı çalışma zamanında belirlenir (late binding).",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "yrcqcwrzY8tcaEI-VFcy8",
      "type": "text",
      "x": 366.9296417236328,
      "y": 4123.900039672852,
      "width": 840.619384765625,
      "height": 225,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a4",
      "roundness": null,
      "seed": 773516228,
      "version": 101,
      "versionNonce": 1708365508,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1738075000711,
      "link": null,
      "locked": false,
      "text": "EX02\n\nSoyut sınıflar (Abstract Class):\n\nPure virtual function içeren bir sınıf soyut sınıf olarak adlandırılır.\nSoyut sınıflardan türetilen sınıflar, bu pure virtual function'ı override etmek\nzorundadır.\n\nPure Virtual func define : Void makeSound() const = 0;",
      "fontSize": 20,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "EX02\n\nSoyut sınıflar (Abstract Class):\n\nPure virtual function içeren bir sınıf soyut sınıf olarak adlandırılır.\nSoyut sınıflardan türetilen sınıflar, bu pure virtual function'ı override etmek zorundadır.\n\nPure Virtual func define : Void makeSound() const = 0;",
      "autoResize": false,
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}